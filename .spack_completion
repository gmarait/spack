_spack()
{
    local cur prev words cword
    if [ -n "$(type -t _init_completion)" ];then
	_init_completion -n = || return
	fi
	COMPREPLY=()
	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	if [ "$COMP_CWORD" -gt 1 ]; then
		preprev="${COMP_WORDS[COMP_CWORD-2]}"
	fi


    case "$cur" in
    ^*)
	COMPREPLY=( $( compgen -W '$(\ls $SPACK_ROOT/var/spack/repos/builtin/packages | while read pack; do echo ^$pack; done)' -- "$cur" ) )
	    return
	    ;;
	esac
    case "$prev" in
	build)
	    COMPREPLY=( $( compgen -W '-h -a -j -v $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	cd)
	    COMPREPLY=( $( compgen -W '-h -m -r -i -p -P -s -S -b' -- "$cur" ) )
	    return
	    ;;
	checksum)
	    COMPREPLY=( $( compgen -W '-h --keep-stage' -- "$cur" ) )
	    return
	    ;;
	compiler)
	    COMPREPLY=( $( compgen -W 'add remove list info' -- "$cur" ) )
	    return
	    ;;
	config)
		COMPREPLY=( $( compgen -W 'get edit' -- "$cur" ) )
	    return
	    ;;
	create)
		case "$preprev" in
		mirror)
			COMPREPLY=( $( compgen -W '-h -d -D -f -o $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
			return
			;;
		*)
			COMPREPLY=( $( compgen -W '-h --keep-stage -n -f' -- "$cur" ) )
			return
			;;
		esac
	    return
	    ;;
	deactivate)
	    COMPREPLY=( $( compgen -W '-h -f -a' -- "$cur" ) )
	    return
	    ;;
	edit)
		case "$preprev" in
		config)
			return
			;;
		*)
			COMPREPLY=( $( compgen -W '-h -f -c $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
			return
			;;
		esac
	    return
	    ;;
	extensions)
	    COMPREPLY=( $( compgen -W '-h -l -p -d' -- "$cur" ) )
	    return
	    ;;
	fetch)
	    COMPREPLY=( $( compgen -W '-h -n -m -D' -- "$cur" ) )
	    return
	    ;;
	find)
		case "$preprev" in
		module)
			COMPREPLY=( $( compgen -W '-h tcl dotkit' -- "$cur" ) )
			return
			;;
		*)
			COMPREPLY=( $( compgen -W '-h -p -d -l -L -u -m -M $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
			return
			;;
		esac
	    return
	    ;;
	graph)
	    COMPREPLY=( $( compgen -W '-h --ascii --dot --concretize' -- "$cur" ) )
	    return
	    ;;
   help|-h)
		return
		;;
	info)
	    COMPREPLY=( $( compgen -W '$(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	install)
	    COMPREPLY=( $( compgen -W '-h -i -j -n -v $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	list)
	    COMPREPLY=( $( compgen -W '-h -i $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	location)
	    COMPREPLY=( $( compgen -W '-h -m -r -i -p -P -s -S -b' -- "$cur" ) )
	    return
	    ;;
	load|unload)
	    COMPREPLY=( $( compgen -W '$(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	mirror)
	    COMPREPLY=( $( compgen -W 'create add remove list' -- "$cur" ) )
	    return
	    ;;
	module)
	    COMPREPLY=( $( compgen -W 'refresh find' -- "$cur" ) )
	    return
	    ;;
	patch)
	    COMPREPLY=( $( compgen -W '-h -n $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	spec)
	    COMPREPLY=( $( compgen -W '-h -i $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	stage)
	    COMPREPLY=( $( compgen -W '-h -n $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
    tcl|dotkit)
	    COMPREPLY=( $( compgen -W 'spec' -- "$cur" ) )
	return
	;;
	uninstall)
	    COMPREPLY=( $( compgen -W ' -h --help -f --force -a --all $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	versions)
	    COMPREPLY=( $( compgen -W ' -h $(\ls $SPACK_ROOT/var/spack/repos/builtin/packages)' -- "$cur" ) )
	    return
	    ;;
	-*)
	    COMPREPLY=($( compgen -W '$(\ls $SPACK_ROOT/var/spack/repos/builtin/packages) ' -- "$cur" ) )
	    return
		;;
    spack)
	    COMPREPLY=($( compgen -W 'activate arch bootstrap build cd checksum clean compiler compilers config create deactivate dependents diy doc edit env extensions fetch find graph help info install list load location md5 mirror module package-list patch pkg
	    providers purge python reindex restage spec stage test test-install uninstall unload unuse url-parse urls use versions ' -- $cur ))
	    return
	    ;;
    esac

    if [ -n "$(type -t _filedir)" ];then
	_filedir
	fi
}
complete -F _spack spack
