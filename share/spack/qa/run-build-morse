#!/bin/bash -e
#
# Description:
#     Runs Spack build smoke tests.  This installs a few packages that
#     cover different parts of the build system.  It is not an exhaustive
#     test of Spack's packages.
#
# Usage:
#     run-build-tests
#
. "$(dirname $0)/setup.sh"
check_dependencies ${coverage} git hg svn

# Move to root directory of Spack
# Allows script to be run from anywhere
cd "$SPACK_ROOT"

# Make sure we have a spec to build.
if [ -z "$SPEC" ]; then
    echo "Error: run-build-tests requires the $SPEC to build to be set."
    exit 1
fi

# Print compiler information
spack config get compilers

# load travis folding before starting installation (can generate long log)
#. share/spack/qa/travis_folding.sh

#travis_fold_start INSTALL
# Run some build smoke tests, potentially with code coverage
#${coverage_run} bin/spack install -v ${SPEC}
#${coverage_combine}
#travis_fold_end

export PING_SLEEP=30s
export WORKDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export BUILD_OUTPUT=$WORKDIR/build.out

touch $BUILD_OUTPUT

dump_output() {
   echo Tailing the last 500 lines of output:
   tail -500 $BUILD_OUTPUT
}
error_handler() {
  echo ERROR: An error was encountered with the build.
  dump_output
  exit 1
}
# If an error occurs, run our error handler to output a tail of the build
trap 'error_handler' ERR

# Set up a repeating loop to send some output to Travis.

bash -c "while true; do echo \$(date) - building ...; sleep $PING_SLEEP; done" &
PING_LOOP_PID=$!

# My build is using maven, but you could build anything with this, E.g.
${coverage_run} bin/spack install -v ${SPEC} >> $BUILD_OUTPUT 2>&1
${coverage_combine} >> $BUILD_OUTPUT 2>&1

# The build finished without returning an error so dump a tail of the output
dump_output

# nicely terminate the ping output loop
kill $PING_LOOP_PID
